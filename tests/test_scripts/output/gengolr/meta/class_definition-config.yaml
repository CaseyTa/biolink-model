description: A class or interface
display_name: class definition
document_category: class definition
fields:
- {description: 'a unique key that identifies a slot, type or class in a schema',
  display_name: name, id: name}
- {description: a name that is used in the singular form, display_name: singular_name,
  id: singular_name}
- {description: a description, display_name: description, id: description}
- {description: Notes about an element, display_name: note, id: note}
- {description: Comment about an element, display_name: comment, id: comment}
- {cardinality: multi, description: Example of usage for a slot or class, display_name: examples,
  id: examples}
- {display_name: see_also, id: see_also}
- {cardinality: multi, description: State information and other details, display_name: flags,
  id: flags}
- {cardinality: multi, description: list of ID/CURIE prefixes applicable to that element,
  display_name: prefixes, id: prefixes}
- {cardinality: multi, display_name: aliases, id: aliases}
- {cardinality: multi, description: list of equivalent or skos exact mappings to an
    ontology class, display_name: mappings, id: mappings}
- {cardinality: multi, display_name: id_prefixes, id: id_prefixes}
- {cardinality: multi, description: used to indicate membership of a term in a defined
    subset of biolink terms used for a particular domain or application (e.g. the
    translator_minimal subset holding the minimal set of predicates used in a translator
    knowledge graph), display_name: in_subset, id: in_subset}
- {description: id of the schema that the element was derived from.  Supplied by the
    loader., display_name: from_schema, id: from_schema}
- {cardinality: multi, display_name: alt_descriptions, id: alt_descriptions}
- {description: 'specifies single-inheritance between classes and slots. While multiple
    inheritance is not allowed, mixins can be provided effectively providing the same
    thing. The semantics are the same when translated to formalisms that allow MI
    (e.g. RDFS/OWL). When translating to a SI framework (e.g. java classes, python
    classes) then is_a is used. When translating a framework without polymorphism
    (e.g. json-schema, solr document schema) then is_a and mixins are recursively
    unfolded', display_name: is_a, id: is_a}
- {description: Used only as a mixin -- cannot be instantiated on its own., display_name: mixin,
  id: mixin}
- {cardinality: multi, description: List of definitions to be mixed in. Targets may
    be any definition of the same type, display_name: mixins, id: mixins}
- {description: 'An abstract class is a high level class or slot that is typically
    used to group common slots together and is generally not instantiated. When generating
    golr-views, abstract classes are ignored', display_name: abstract, id: abstract}
- {cardinality: multi, description: map from local identifier to slot, display_name: local_names,
  id: local_names}
- {cardinality: multi, description: list of class or slot definitions that are combined
    to create the union class, display_name: union_of, id: union_of}
- {description: Ontolgy property which this is a subclass of. Not to be confused with
    is_a which links datamodel classes, display_name: subclass_of, id: subclass_of}
- {cardinality: multi, description: identifies the possible uri's of the range, display_name: values_from,
  id: values_from}
- {description: Symmetric slot, display_name: symmetric, id: symmetric}
- {cardinality: multi, description: 'The combination of is_a plus defining slots form
    a genus-differentia definition, or the set of necessary and sufficient conditions
    that can be transformed into an OWL equivalence axiom', display_name: defining_slots,
  id: defining_slots}
- {cardinality: multi, description: list of slot names that are applicable to a class.
    slots are by default inherited over is_a and mixins., display_name: slots, id: slots}
- {cardinality: multi, description: 'Additional info on how a slot is used in the
    context of a class. Many slots may be re-used across different classes, but the
    meaning of the slot may be refined by context. For example, a generic association
    model may use slots subject/predicate/object with generic semantics and minimal
    constraints. When this is subclasses, e.g. to disease-phenotype associations then
    slot_usage may specify both local naming (e.g. subject=disease) and local constraints',
  display_name: slot_usage, id: slot_usage}
- {description: 'Used to extend an existing class definition. For example, if we have
    a core schema where a gene has two slots for identifier and symbol, and we have
    a specialized schema for my_organism where we wish to add a slot systematic_name,
    we can avoid subclassing by defining a class gene_my_organism, adding the slot
    to this class, and then adding an apply_to pointing to the gene class. The new
    slot will be ''injected into'' the gene class.', display_name: apply_to, id: apply_to}
- {display_name: entity, id: entity}
id: class_definition
schema_generating: true
weight: 20
