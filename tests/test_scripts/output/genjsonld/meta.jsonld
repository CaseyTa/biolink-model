{
   "name": "metamodel",
   "description": "Metamodel for biolink schema",
   "id": "https://biolink.github.io/metamodel/ontology/meta.ttl",
   "version": "0.2.0",
   "license": "https://creativecommons.org/publicdomain/zero/1.0/",
   "slots": {
      "name": {
         "name": "name",
         "description": "a unique key that identifies a slot, type or class in a schema",
         "domain": "element",
         "range": "string",
         "primary_key": true,
         "not_inherited": true
      },
      "singular_name": {
         "name": "singular_name",
         "description": "a name that is used in the singular form",
         "domain": "element",
         "range": "string"
      },
      "description": {
         "name": "description",
         "description": "a description",
         "domain": "element",
         "range": "string"
      },
      "alt_descriptions": {
         "name": "alt_descriptions",
         "note": "Needs description",
         "multivalued": true,
         "domain": "element",
         "range": "string"
      },
      "note": {
         "name": "note",
         "description": "Notes about an element",
         "domain": "element",
         "range": "string",
         "not_inherited": true
      },
      "comment": {
         "name": "comment",
         "description": "Comment about an element",
         "domain": "element",
         "range": "string",
         "not_inherited": true
      },
      "examples": {
         "name": "examples",
         "description": "Example of usage for a slot or class",
         "multivalued": true,
         "domain": "element",
         "range": "example",
         "inlined": true,
         "not_inherited": true
      },
      "prefixes": {
         "name": "prefixes",
         "description": "list of ID/CURIE prefixes applicable to that element",
         "multivalued": true,
         "domain": "element",
         "range": "string",
         "inlined": true
      },
      "aliases": {
         "name": "aliases",
         "multivalued": true,
         "domain": "element",
         "range": "string"
      },
      "in_subset": {
         "name": "in_subset",
         "description": "used to indicate membership of a term in a defined subset of biolink terms used for a particular domain or application (e.g. the translator_minimal subset holding the minimal set of predicates used in a translator knowledge graph)",
         "mappings": {
            "oio": "inSubset"
         },
         "multivalued": true,
         "domain": "element",
         "range": "string"
      },
      "from_schema": {
         "name": "from_schema",
         "description": "id of the schema that the element was derived from.  Supplied by the loader.",
         "domain": "element",
         "range": "string"
      },
      "flags": {
         "name": "flags",
         "description": "State information and other details",
         "multivalued": true,
         "domain": "element",
         "range": "string"
      },
      "see_also": {
         "name": "see_also",
         "note": "needs description",
         "domain": "element",
         "range": "string"
      },
      "id_prefixes": {
         "name": "id_prefixes",
         "note": "needs description",
         "multivalued": true,
         "domain": "element",
         "range": "string"
      },
      "mappings": {
         "name": "mappings",
         "description": "list of equivalent or skos exact mappings to an ontology class",
         "multivalued": true,
         "domain": "element",
         "range": "string",
         "not_inherited": true
      },
      "is_a": {
         "name": "is_a",
         "description": "specifies single-inheritance between classes and slots. While multiple inheritance is not allowed, mixins can be provided effectively providing the same thing. The semantics are the same when translated to formalisms that allow MI (e.g. RDFS/OWL). When translating to a SI framework (e.g. java classes, python classes) then is_a is used. When translating a framework without polymorphism (e.g. json-schema, solr document schema) then is_a and mixins are recursively unfolded",
         "domain": "definition",
         "range": "definition"
      },
      "mixin": {
         "name": "mixin",
         "description": "Used only as a mixin -- cannot be instantiated on its own.",
         "domain": "definition",
         "range": "boolean"
      },
      "mixins": {
         "name": "mixins",
         "description": "List of definitions to be mixed in. Targets may be any definition of the same type",
         "multivalued": true,
         "domain": "definition",
         "range": "definition"
      },
      "abstract": {
         "name": "abstract",
         "description": "An abstract class is a high level class or slot that is typically used to group common slots together and is generally not instantiated. When generating golr-views, abstract classes are ignored",
         "domain": "definition",
         "range": "boolean"
      },
      "local_names": {
         "name": "local_names",
         "description": "map from local identifier to slot",
         "multivalued": true,
         "domain": "definition",
         "range": "string",
         "inlined": true
      },
      "union_of": {
         "name": "union_of",
         "description": "list of class or slot definitions that are combined to create the union class",
         "multivalued": true,
         "domain": "definition",
         "range": "definition"
      },
      "values_from": {
         "name": "values_from",
         "description": "identifies the possible uri's of the range",
         "multivalued": true,
         "domain": "definition",
         "range": "string"
      },
      "subclass_of": {
         "name": "subclass_of",
         "description": "Ontolgy property which this is a subclass of. Not to be confused with is_a which links datamodel classes",
         "domain": "definition",
         "range": "definition"
      },
      "symmetric": {
         "name": "symmetric",
         "description": "Symmetric slot",
         "note": "Indications that a slot or reified association is symmetric",
         "domain": "definition",
         "range": "boolean"
      },
      "id": {
         "name": "id",
         "description": "a globally unique id or url for a schema",
         "domain": "schema definition",
         "range": "string",
         "primary_key": true
      },
      "version": {
         "name": "version",
         "description": "Schema version",
         "domain": "schema definition",
         "range": "string"
      },
      "imports": {
         "name": "imports",
         "description": "A list of modules that are imported into the schema",
         "multivalued": true,
         "domain": "schema definition",
         "range": "string"
      },
      "license": {
         "name": "license",
         "description": "license for the schema",
         "domain": "schema definition",
         "range": "string"
      },
      "types": {
         "name": "types",
         "description": "types defined in schema",
         "multivalued": true,
         "domain": "schema definition",
         "range": "type definition",
         "inlined": true
      },
      "slot_definitions": {
         "name": "slot definitions",
         "description": "collection of slot definitions in a schema",
         "multivalued": true,
         "domain": "schema definition",
         "range": "slot definition",
         "inlined": true,
         "alias": "slots"
      },
      "classes": {
         "name": "classes",
         "description": "classes defined in schema",
         "multivalued": true,
         "domain": "schema definition",
         "range": "class definition",
         "inlined": true
      },
      "metamodel_version": {
         "name": "metamodel_version",
         "description": "Version of the metamodel used to load the schema. Supplied by the loader",
         "domain": "schema definition",
         "range": "string"
      },
      "source_file": {
         "name": "source_file",
         "description": "name, uri or description of the source of the schema.  Supplied by the loader",
         "domain": "schema definition",
         "range": "string"
      },
      "source_file_date": {
         "name": "source_file_date",
         "description": "modification date of the source of the schema.  Supplied by the loader",
         "domain": "schema definition",
         "range": "string"
      },
      "source_file_size": {
         "name": "source_file_size",
         "description": "size in bytes of the source of the schema.  Supplied by the loader",
         "domain": "schema definition",
         "range": "integer"
      },
      "generation_date": {
         "name": "generation_date",
         "description": "date that the schema was loaded/generated.  Supplied by the loader",
         "domain": "schema definition",
         "range": "date"
      },
      "defining_slots": {
         "name": "defining_slots",
         "description": "The combination of is_a plus defining slots form a genus-differentia definition, or the set of necessary and sufficient conditions that can be transformed into an OWL equivalence axiom",
         "multivalued": true,
         "domain": "class definition",
         "range": "slot definition"
      },
      "slots": {
         "name": "slots",
         "description": "list of slot names that are applicable to a class. slots are by default inherited over is_a and mixins.",
         "multivalued": true,
         "domain": "class definition",
         "range": "slot definition"
      },
      "slot_usage": {
         "name": "slot_usage",
         "description": "Additional info on how a slot is used in the context of a class. Many slots may be re-used across different classes, but the meaning of the slot may be refined by context. For example, a generic association model may use slots subject/predicate/object with generic semantics and minimal constraints. When this is subclasses, e.g. to disease-phenotype associations then slot_usage may specify both local naming (e.g. subject=disease) and local constraints",
         "multivalued": true,
         "domain": "class definition",
         "range": "slot definition",
         "inlined": true
      },
      "apply_to": {
         "name": "apply_to",
         "description": "Used to extend an existing class definition. For example, if we have a core schema where a gene has two slots for identifier and symbol, and we have a specialized schema for my_organism where we wish to add a slot systematic_name, we can avoid subclassing by defining a class gene_my_organism, adding the slot to this class, and then adding an apply_to pointing to the gene class. The new slot will be 'injected into' the gene class.",
         "domain": "class definition",
         "range": "class definition"
      },
      "entity": {
         "name": "entity",
         "note": "needs description",
         "domain": "class definition",
         "range": "boolean"
      },
      "multivalued": {
         "name": "multivalued",
         "description": "If true slot can have many values",
         "domain": "slot definition",
         "range": "boolean"
      },
      "domain": {
         "name": "domain",
         "description": "The class to which this slot applies.",
         "domain": "slot definition",
         "range": "class definition"
      },
      "range": {
         "name": "range",
         "description": "The slot type.  If absent, it is the builtin type 'string'",
         "domain": "slot definition",
         "range": "element"
      },
      "required": {
         "name": "required",
         "description": "If true slot must have at least one value",
         "domain": "slot definition",
         "range": "boolean"
      },
      "inlined": {
         "name": "inlined",
         "description": "if true then the value of this slot is inlined (i.e. a nested object) rather linked by key",
         "domain": "slot definition",
         "range": "boolean"
      },
      "definitional": {
         "name": "definitional",
         "description": "slot is a defining slot -- injection into the defining_slots list",
         "domain": "slot definition",
         "range": "boolean"
      },
      "primary_key": {
         "name": "primary_key",
         "description": "True means that this serves as a unique identifier",
         "domain": "slot definition",
         "range": "boolean"
      },
      "identifier": {
         "name": "identifier",
         "description": "True means that this slot must be unique across the collection of slots",
         "domain": "slot definition",
         "range": "boolean"
      },
      "alias": {
         "name": "alias",
         "description": "A name to be assigned to the slot in implementations that is different that its type.  The primary use for this is to allow class AND schema definitions to both have \"slots\" where one inline and the other a reference",
         "domain": "slot definition",
         "range": "string"
      },
      "path": {
         "name": "path",
         "description": "For any denormalized slot, this represents the tree or graph path used to generate the denormalized form",
         "domain": "slot definition",
         "range": "string"
      },
      "subproperty_of": {
         "name": "subproperty_of",
         "description": "Ontolgy property which this is a subproperty of",
         "domain": "slot definition",
         "range": "slot definition"
      },
      "inverse": {
         "name": "inverse",
         "description": "used to indicate the inverse of a slot (e.g. 'expresses' is the inverse predicate of 'expressed in')",
         "domain": "slot definition",
         "range": "slot definition"
      },
      "is_class_field": {
         "name": "is_class_field",
         "note": "Needs description",
         "domain": "slot definition",
         "range": "boolean"
      },
      "role": {
         "name": "role",
         "note": "Needs description",
         "domain": "slot definition",
         "range": "string"
      },
      "not_inherited": {
         "name": "not_inherited",
         "description": "True means that the slot is local and is not_inherited across is_a or slot_usage paths",
         "domain": "slot definition",
         "range": "boolean"
      },
      "typeof": {
         "name": "typeof",
         "description": "a builtin ('string', 'integer', 'float', 'double', 'boolean', 'time') or another type definition",
         "domain": "type definition",
         "range": "string"
      },
      "value": {
         "name": "value",
         "domain": "example",
         "range": "string"
      },
      "value_description": {
         "name": "value description",
         "domain": "example",
         "range": "string",
         "alias": "description"
      }
   },
   "classes": {
      "Example": {
         "name": "example",
         "description": "example of usage",
         "slots": [
            "value",
            "value description"
         ]
      },
      "Element": {
         "name": "element",
         "description": "root of all described things",
         "abstract": true,
         "slots": [
            "name",
            "singular_name",
            "description",
            "note",
            "comment",
            "examples",
            "see_also",
            "flags",
            "prefixes",
            "aliases",
            "mappings",
            "id_prefixes",
            "in_subset",
            "from_schema",
            "alt_descriptions"
         ]
      },
      "Definition": {
         "name": "definition",
         "description": "definition base class",
         "is_a": "element",
         "abstract": true,
         "slots": [
            "is_a",
            "mixin",
            "mixins",
            "abstract",
            "local_names",
            "union_of",
            "subclass_of",
            "values_from",
            "symmetric"
         ]
      },
      "SlotDefinition": {
         "name": "slot definition",
         "description": "A property or slot",
         "is_a": "definition",
         "slots": [
            "multivalued",
            "domain",
            "range",
            "required",
            "inlined",
            "primary_key",
            "identifier",
            "definitional",
            "alias",
            "path",
            "subproperty_of",
            "inverse",
            "is_class_field",
            "not_inherited",
            "role"
         ]
      },
      "ClassDefinition": {
         "name": "class definition",
         "description": "A class or interface",
         "is_a": "definition",
         "slots": [
            "defining_slots",
            "slots",
            "slot_usage",
            "apply_to",
            "entity"
         ]
      },
      "TypeDefinition": {
         "name": "type definition",
         "description": "A type definition",
         "is_a": "element",
         "slots": [
            "typeof"
         ]
      },
      "SchemaDefinition": {
         "name": "schema definition",
         "description": "A collection of definitions",
         "is_a": "definition",
         "slots": [
            "id",
            "version",
            "imports",
            "license",
            "types",
            "slot definitions",
            "classes",
            "metamodel_version",
            "source_file",
            "source_file_size",
            "source_file_date",
            "generation_date"
         ]
      }
   },
   "metamodel_version": "0.2.0",
   "source_file": "/Users/solbrig/git/hsolbrig/biolink-model/meta.yaml",
   "source_file_size": 14901,
   "source_file_date": "Mon Jun 11 12:48:39 2018",
   "generation_date": "2018-06-13 09:21",
   "@context": "https://raw.githubusercontent.com/hsolbrig/biolink-model/master/metamodel/context.jsonld"
}

