@prefix bioentity: <http://bioentity.io/vocab/> .
@prefix meta: <http://bioentity.io/meta/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<https://biolink.github.io/metamodel/ontology/meta.ttl> bioentity:classes [ ] ;
    bioentity:description "Metamodel for biolink schema" ;
    bioentity:generation_date "2018-06-12 12:55" ;
    bioentity:license "https://creativecommons.org/publicdomain/zero/1.0/" ;
    bioentity:metamodel_version "0.2.0" ;
    bioentity:name "metamodel" ;
    bioentity:slots [ bioentity:abstract [ bioentity:description "An abstract class is a high level class or slot that is typically used to group common slots together and is generally not instantiated. When generating golr-views, abstract classes are ignored" ;
                    bioentity:domain "definition" ;
                    bioentity:name "abstract" ;
                    bioentity:range "boolean" ] ;
            bioentity:alias [ bioentity:description "A name to be assigned to the slot in implementations that is different that its type.  The primary use for this is to allow class AND schema definitions to both have \"slots\" where one inline and the other a reference" ;
                    bioentity:domain "slot definition" ;
                    bioentity:name "alias" ;
                    bioentity:range "string" ] ;
            bioentity:aliases [ bioentity:domain "element" ;
                    bioentity:multivalued true ;
                    bioentity:name "aliases" ;
                    bioentity:range "string" ] ;
            bioentity:alt_descriptions [ bioentity:domain "element" ;
                    bioentity:multivalued true ;
                    bioentity:name "alt_descriptions" ;
                    bioentity:note "Needs description" ;
                    bioentity:range "string" ] ;
            bioentity:apply_to [ bioentity:description "Used to extend an existing class definition. For example, if we have a core schema where a gene has two slots for identifier and symbol, and we have a specialized schema for my_organism where we wish to add a slot systematic_name, we can avoid subclassing by defining a class gene_my_organism, adding the slot to this class, and then adding an apply_to pointing to the gene class. The new slot will be 'injected into' the gene class." ;
                    bioentity:domain "class definition" ;
                    bioentity:name "apply_to" ;
                    bioentity:range "class definition" ] ;
            bioentity:classes [ bioentity:description "classes defined in schema" ;
                    bioentity:domain "schema definition" ;
                    bioentity:inlined true ;
                    bioentity:multivalued true ;
                    bioentity:name "classes" ;
                    bioentity:range "class definition" ] ;
            bioentity:comment [ bioentity:description "Comment about an element" ;
                    bioentity:domain "element" ;
                    bioentity:name "comment" ;
                    bioentity:not_inherited true ;
                    bioentity:range "string" ] ;
            bioentity:defining_slots [ bioentity:description "The combination of is_a plus defining slots form a genus-differentia definition, or the set of necessary and sufficient conditions that can be transformed into an OWL equivalence axiom" ;
                    bioentity:domain "class definition" ;
                    bioentity:multivalued true ;
                    bioentity:name "defining_slots" ;
                    bioentity:range "slot definition" ] ;
            bioentity:definitional [ bioentity:description "slot is a defining slot -- injection into the defining_slots list" ;
                    bioentity:domain "slot definition" ;
                    bioentity:name "definitional" ;
                    bioentity:range "boolean" ] ;
            bioentity:description [ bioentity:description "a description" ;
                    bioentity:domain "element" ;
                    bioentity:name "description" ;
                    bioentity:range "string" ] ;
            bioentity:domain [ bioentity:description "The class to which this slot applies." ;
                    bioentity:domain "slot definition" ;
                    bioentity:name "domain" ;
                    bioentity:range "class definition" ] ;
            bioentity:entity [ bioentity:domain "class definition" ;
                    bioentity:name "entity" ;
                    bioentity:note "needs description" ;
                    bioentity:range "boolean" ] ;
            bioentity:examples [ bioentity:description "Example of usage for a slot or class" ;
                    bioentity:domain "element" ;
                    bioentity:inlined true ;
                    bioentity:multivalued true ;
                    bioentity:name "examples" ;
                    bioentity:not_inherited true ;
                    bioentity:range "example" ] ;
            bioentity:flags [ bioentity:description "State information and other details" ;
                    bioentity:domain "element" ;
                    bioentity:multivalued true ;
                    bioentity:name "flags" ;
                    bioentity:range "string" ] ;
            bioentity:from_schema [ bioentity:description "id of the schema that the element was derived from.  Supplied by the loader." ;
                    bioentity:domain "element" ;
                    bioentity:name "from_schema" ;
                    bioentity:range "string" ] ;
            bioentity:generation_date [ bioentity:description "date that the schema was loaded/generated.  Supplied by the loader" ;
                    bioentity:domain "schema definition" ;
                    bioentity:name "generation_date" ;
                    bioentity:range "date" ] ;
            bioentity:id_prefixes [ bioentity:domain "element" ;
                    bioentity:multivalued true ;
                    bioentity:name "id_prefixes" ;
                    bioentity:note "needs description" ;
                    bioentity:range "string" ] ;
            bioentity:identifier [ bioentity:description "True means that this slot must be unique across the collection of slots" ;
                    bioentity:domain "slot definition" ;
                    bioentity:name "identifier" ;
                    bioentity:range "boolean" ] ;
            bioentity:imports [ bioentity:description "A list of modules that are imported into the schema" ;
                    bioentity:domain "schema definition" ;
                    bioentity:multivalued true ;
                    bioentity:name "imports" ;
                    bioentity:range "string" ] ;
            bioentity:in_subset [ bioentity:description "used to indicate membership of a term in a defined subset of biolink terms used for a particular domain or application (e.g. the translator_minimal subset holding the minimal set of predicates used in a translator knowledge graph)" ;
                    bioentity:domain "element" ;
                    bioentity:mappings [ ] ;
                    bioentity:multivalued true ;
                    bioentity:name "in_subset" ;
                    bioentity:range "string" ] ;
            bioentity:inlined [ bioentity:description "if true then the value of this slot is inlined (i.e. a nested object) rather linked by key" ;
                    bioentity:domain "slot definition" ;
                    bioentity:name "inlined" ;
                    bioentity:range "boolean" ] ;
            bioentity:inverse [ bioentity:description "used to indicate the inverse of a slot (e.g. 'expresses' is the inverse predicate of 'expressed in')" ;
                    bioentity:domain "slot definition" ;
                    bioentity:name "inverse" ;
                    bioentity:range "slot definition" ] ;
            bioentity:is_a [ bioentity:description "specifies single-inheritance between classes and slots. While multiple inheritance is not allowed, mixins can be provided effectively providing the same thing. The semantics are the same when translated to formalisms that allow MI (e.g. RDFS/OWL). When translating to a SI framework (e.g. java classes, python classes) then is_a is used. When translating a framework without polymorphism (e.g. json-schema, solr document schema) then is_a and mixins are recursively unfolded" ;
                    bioentity:domain "definition" ;
                    bioentity:name "is_a" ;
                    bioentity:range "definition" ] ;
            bioentity:is_class_field [ bioentity:domain "slot definition" ;
                    bioentity:name "is_class_field" ;
                    bioentity:note "Needs description" ;
                    bioentity:range "boolean" ] ;
            bioentity:license [ bioentity:description "license for the schema" ;
                    bioentity:domain "schema definition" ;
                    bioentity:name "license" ;
                    bioentity:range "string" ] ;
            bioentity:local_names [ bioentity:description "map from local identifier to slot" ;
                    bioentity:domain "definition" ;
                    bioentity:inlined true ;
                    bioentity:multivalued true ;
                    bioentity:name "local_names" ;
                    bioentity:range "string" ] ;
            bioentity:mappings [ bioentity:description "list of equivalent or skos exact mappings to an ontology class" ;
                    bioentity:domain "element" ;
                    bioentity:multivalued true ;
                    bioentity:name "mappings" ;
                    bioentity:not_inherited true ;
                    bioentity:range "string" ] ;
            bioentity:metamodel_version [ bioentity:description "Version of the metamodel used to load the schema. Supplied by the loader" ;
                    bioentity:domain "schema definition" ;
                    bioentity:name "metamodel_version" ;
                    bioentity:range "string" ] ;
            bioentity:mixin [ bioentity:description "Used only as a mixin -- cannot be instantiated on its own." ;
                    bioentity:domain "definition" ;
                    bioentity:name "mixin" ;
                    bioentity:range "boolean" ] ;
            bioentity:mixins [ bioentity:description "List of definitions to be mixed in. Targets may be any definition of the same type" ;
                    bioentity:domain "definition" ;
                    bioentity:multivalued true ;
                    bioentity:name "mixins" ;
                    bioentity:range "definition" ] ;
            bioentity:multivalued [ bioentity:description "If true slot can have many values" ;
                    bioentity:domain "slot definition" ;
                    bioentity:name "multivalued" ;
                    bioentity:range "boolean" ] ;
            bioentity:name [ bioentity:description "a unique key that identifies a slot, type or class in a schema" ;
                    bioentity:domain "element" ;
                    bioentity:name "name" ;
                    bioentity:not_inherited true ;
                    bioentity:primary_key true ;
                    bioentity:range "string" ] ;
            bioentity:not_inherited [ bioentity:description "True means that the slot is local and is not_inherited across is_a or slot_usage paths" ;
                    bioentity:domain "slot definition" ;
                    bioentity:name "not_inherited" ;
                    bioentity:range "boolean" ] ;
            bioentity:note [ bioentity:description "Notes about an element" ;
                    bioentity:domain "element" ;
                    bioentity:name "note" ;
                    bioentity:not_inherited true ;
                    bioentity:range "string" ] ;
            bioentity:path [ bioentity:description "For any denormalized slot, this represents the tree or graph path used to generate the denormalized form" ;
                    bioentity:domain "slot definition" ;
                    bioentity:name "path" ;
                    bioentity:range "string" ] ;
            bioentity:prefixes [ bioentity:description "list of ID/CURIE prefixes applicable to that element" ;
                    bioentity:domain "element" ;
                    bioentity:inlined true ;
                    bioentity:multivalued true ;
                    bioentity:name "prefixes" ;
                    bioentity:range "string" ] ;
            bioentity:primary_key [ bioentity:description "True means that this serves as a unique identifier" ;
                    bioentity:domain "slot definition" ;
                    bioentity:name "primary_key" ;
                    bioentity:range "boolean" ] ;
            bioentity:range [ bioentity:description "The slot type.  If absent, it is the builtin type 'string'" ;
                    bioentity:domain "slot definition" ;
                    bioentity:name "range" ;
                    bioentity:range "element" ] ;
            bioentity:required [ bioentity:description "If true slot must have at least one value" ;
                    bioentity:domain "slot definition" ;
                    bioentity:name "required" ;
                    bioentity:range "boolean" ] ;
            bioentity:role [ bioentity:domain "slot definition" ;
                    bioentity:name "role" ;
                    bioentity:note "Needs description" ;
                    bioentity:range "string" ] ;
            bioentity:see_also [ bioentity:domain "element" ;
                    bioentity:name "see_also" ;
                    bioentity:note "needs description" ;
                    bioentity:range "string" ] ;
            bioentity:singular_name [ bioentity:description "a name that is used in the singular form" ;
                    bioentity:domain "element" ;
                    bioentity:name "singular_name" ;
                    bioentity:range "string" ] ;
            bioentity:slot_usage [ bioentity:description "Additional info on how a slot is used in the context of a class. Many slots may be re-used across different classes, but the meaning of the slot may be refined by context. For example, a generic association model may use slots subject/predicate/object with generic semantics and minimal constraints. When this is subclasses, e.g. to disease-phenotype associations then slot_usage may specify both local naming (e.g. subject=disease) and local constraints" ;
                    bioentity:domain "class definition" ;
                    bioentity:inlined true ;
                    bioentity:multivalued true ;
                    bioentity:name "slot_usage" ;
                    bioentity:range "slot definition" ] ;
            bioentity:slots [ bioentity:description "list of slot names that are applicable to a class. slots are by default inherited over is_a and mixins." ;
                    bioentity:domain "class definition" ;
                    bioentity:multivalued true ;
                    bioentity:name "slots" ;
                    bioentity:range "slot definition" ] ;
            bioentity:source_file [ bioentity:description "name, uri or description of the source of the schema.  Supplied by the loader" ;
                    bioentity:domain "schema definition" ;
                    bioentity:name "source_file" ;
                    bioentity:range "string" ] ;
            bioentity:source_file_date [ bioentity:description "modification date of the source of the schema.  Supplied by the loader" ;
                    bioentity:domain "schema definition" ;
                    bioentity:name "source_file_date" ;
                    bioentity:range "string" ] ;
            bioentity:source_file_size [ bioentity:description "size in bytes of the source of the schema.  Supplied by the loader" ;
                    bioentity:domain "schema definition" ;
                    bioentity:name "source_file_size" ;
                    bioentity:range "integer" ] ;
            bioentity:subclass_of [ bioentity:description "Ontolgy property which this is a subclass of. Not to be confused with is_a which links datamodel classes" ;
                    bioentity:domain "definition" ;
                    bioentity:name "subclass_of" ;
                    bioentity:range "definition" ] ;
            bioentity:subproperty_of [ bioentity:description "Ontolgy property which this is a subproperty of" ;
                    bioentity:domain "slot definition" ;
                    bioentity:name "subproperty_of" ;
                    bioentity:range "slot definition" ] ;
            bioentity:symmetric [ bioentity:description "Symmetric slot" ;
                    bioentity:domain "definition" ;
                    bioentity:name "symmetric" ;
                    bioentity:note "Indications that a slot or reified association is symmetric" ;
                    bioentity:range "boolean" ] ;
            bioentity:typeof [ bioentity:description "a builtin ('string', 'integer', 'float', 'double', 'boolean', 'time') or another type definition" ;
                    bioentity:domain "type definition" ;
                    bioentity:name "typeof" ;
                    bioentity:range "string" ] ;
            bioentity:types [ bioentity:description "types defined in schema" ;
                    bioentity:domain "schema definition" ;
                    bioentity:inlined true ;
                    bioentity:multivalued true ;
                    bioentity:name "types" ;
                    bioentity:range "type definition" ] ;
            bioentity:union_of [ bioentity:description "list of class or slot definitions that are combined to create the union class" ;
                    bioentity:domain "definition" ;
                    bioentity:multivalued true ;
                    bioentity:name "union_of" ;
                    bioentity:range "definition" ] ;
            bioentity:value [ bioentity:domain "example" ;
                    bioentity:name "value" ;
                    bioentity:range "string" ] ;
            bioentity:values_from [ bioentity:description "identifies the possible uri's of the range" ;
                    bioentity:domain "definition" ;
                    bioentity:multivalued true ;
                    bioentity:name "values_from" ;
                    bioentity:range "string" ] ;
            bioentity:version [ bioentity:description "Schema version" ;
                    bioentity:domain "schema definition" ;
                    bioentity:name "version" ;
                    bioentity:range "string" ] ] ;
    bioentity:source_file "/Users/solbrig/git/hsolbrig/biolink-model/meta.yaml" ;
    bioentity:source_file_date "Mon Jun 11 12:48:39 2018" ;
    bioentity:source_file_size 14901 ;
    bioentity:version "0.2.0" .



